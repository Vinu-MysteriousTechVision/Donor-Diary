diff --git a/node_modules/react-native-viewpager/DefaultViewPageIndicator.js b/node_modules/react-native-viewpager/DefaultViewPageIndicator.js
index 320d4a2..d694fe1 100644
--- a/node_modules/react-native-viewpager/DefaultViewPageIndicator.js
+++ b/node_modules/react-native-viewpager/DefaultViewPageIndicator.js
@@ -8,8 +8,10 @@ var {
   Text,
   TouchableOpacity,
   View,
-  Animated,
+  Animated
 } = ReactNative;
+var createClass = require('create-react-class');
+import PropTypes from 'prop-types';

 var deviceWidth = Dimensions.get('window').width;
 var DOT_SIZE = 6;
@@ -18,12 +20,13 @@ var DOT_SAPCE = 4;
 var styles = StyleSheet.create({
   tab: {
     alignItems: 'center',
+    marginBottom: 4
   },

   tabs: {
     flexDirection: 'row',
     alignItems: 'center',
-    justifyContent: 'center',
+    justifyContent: 'center'
   },

   dot: {
@@ -32,7 +35,7 @@ var styles = StyleSheet.create({
     borderRadius: DOT_SIZE / 2,
     backgroundColor: '#E0E1E2',
     marginLeft: DOT_SAPCE,
-    marginRight: DOT_SAPCE,
+    marginRight: DOT_SAPCE
   },

   curDot: {
@@ -42,20 +45,20 @@ var styles = StyleSheet.create({
     borderRadius: DOT_SIZE / 2,
     backgroundColor: '#80ACD0',
     margin: DOT_SAPCE,
-    bottom: 0,
-  },
+    bottom: 0
+  }
 });

-var DefaultViewPageIndicator = React.createClass({
+var DefaultViewPageIndicator = createClass({
   propTypes: {
-    goToPage: React.PropTypes.func,
-    activePage: React.PropTypes.number,
-    pageCount: React.PropTypes.number
+    goToPage: PropTypes.func,
+    activePage: PropTypes.number,
+    pageCount: PropTypes.number
   },

   getInitialState() {
     return {
-      viewWidth: 0,
+      viewWidth: 0
     };
   },

@@ -77,29 +80,30 @@ var DefaultViewPageIndicator = React.createClass({
     var offsetX = itemWidth * (this.props.activePage - this.props.scrollOffset);
     var left = this.props.scrollValue.interpolate({
       inputRange: [0, 1], outputRange: [offsetX, offsetX + itemWidth]
-    })
+    });

     var indicators = [];
     for (var i = 0; i < pageCount; i++) {
-      indicators.push(this.renderIndicator(i))
+      indicators.push(this.renderIndicator(i));
     }

     return (
       <View style={styles.tabs}
         onLayout={(event) => {
-            var viewWidth = event.nativeEvent.layout.width;
-            if (!viewWidth || this.state.viewWidth === viewWidth) {
-              return;
-            }
-            this.setState({
-              viewWidth: viewWidth,
-            });
-          }}>
+          var viewWidth = event.nativeEvent.layout.width;
+          if (!viewWidth || this.state.viewWidth === viewWidth) {
+            return;
+          }
+          this.setState({
+            viewWidth: viewWidth
+          });
+        }}
+      >
         {indicators}
-        <Animated.View style={[styles.curDot, {left}]} />
+        <Animated.View style={[styles.curDot, { left }]} />
       </View>
     );
-  },
+  }
 });

 module.exports = DefaultViewPageIndicator;
diff --git a/node_modules/react-native-viewpager/ViewPager.js b/node_modules/react-native-viewpager/ViewPager.js
index b0709ed..835d14a 100644
--- a/node_modules/react-native-viewpager/ViewPager.js
+++ b/node_modules/react-native-viewpager/ViewPager.js
@@ -1,7 +1,6 @@
 'use strict';

 var React = require('react');
-var { PropTypes } = React;

 var ReactNative = require('react-native');
 var {
@@ -11,7 +10,7 @@ var {
   TouchableOpacity,
   PanResponder,
   Animated,
-  StyleSheet,
+  StyleSheet
 } = ReactNative;

 var StaticRenderer = require('react-native/Libraries/Components/StaticRenderer');
@@ -20,12 +19,14 @@ var TimerMixin = require('react-timer-mixin');
 var DefaultViewPageIndicator = require('./DefaultViewPageIndicator');
 var deviceWidth = Dimensions.get('window').width;
 var ViewPagerDataSource = require('./ViewPagerDataSource');
+import PropTypes from 'prop-types';
+var createClass = require('create-react-class');

-var ViewPager = React.createClass({
+var ViewPager = createClass({
   mixins: [TimerMixin],

   statics: {
-    DataSource: ViewPagerDataSource,
+    DataSource: ViewPagerDataSource
   },

   propTypes: {
@@ -41,7 +42,7 @@ var ViewPager = React.createClass({
     locked: PropTypes.bool,
     autoPlay: PropTypes.bool,
     animation: PropTypes.func,
-    initialPage: PropTypes.number,
+    initialPage: PropTypes.number
   },

   fling: false,
@@ -55,10 +56,10 @@ var ViewPager = React.createClass({
           {
             toValue: toValue,
             friction: 10,
-            tension: 50,
-          })
-      },
-    }
+            tension: 50
+          });
+      }
+    };
   },

   getInitialState() {
@@ -75,7 +76,7 @@ var ViewPager = React.createClass({
     var release = (e, gestureState) => {
       var relativeGestureDistance = gestureState.dx / deviceWidth,
           //lastPageIndex = this.props.children.length - 1,
-          vx = gestureState.vx;
+        vx = gestureState.vx;

       var step = 0;
       if (relativeGestureDistance < -0.5 || (relativeGestureDistance < 0 && vx <= -1e-6)) {
@@ -87,7 +88,7 @@ var ViewPager = React.createClass({
       this.props.hasTouch && this.props.hasTouch(false);

       this.movePage(step, gestureState);
-    }
+    };

     this._panResponder = PanResponder.create({
       // Claim responder if it's a horizontal pan
@@ -111,7 +112,7 @@ var ViewPager = React.createClass({
         var dx = gestureState.dx;
         var offsetX = -dx / this.state.viewWidth + this.childIndex;
         this.state.scrollValue.setValue(offsetX);
-      },
+      }
     });

     if (this.props.isLoop) {
@@ -146,7 +147,7 @@ var ViewPager = React.createClass({
       var maxPage = nextProps.dataSource.getPageCount() - 1;
       var constrainedPage = Math.max(0, Math.min(this.state.currentPage, maxPage));
       this.setState({
-        currentPage: constrainedPage,
+        currentPage: constrainedPage
       });

       if (!nextProps.isLoop) {
@@ -173,7 +174,7 @@ var ViewPager = React.createClass({
     var pageCount = this.props.dataSource.getPageCount();
     if (pageNumber < 0 || pageNumber >= pageCount) {
       console.error('Invalid page number: ', pageNumber);
-      return
+      return;
     }

     var step = pageNumber - this.state.currentPage;
@@ -198,7 +199,7 @@ var ViewPager = React.createClass({
       this.childIndex = nextChildIdx;
       this.state.scrollValue.setValue(nextChildIdx);
       this.setState({
-        currentPage: pageNumber,
+        currentPage: pageNumber
       });
     };

@@ -301,31 +302,32 @@ var ViewPager = React.createClass({
     });

     return (
-      <View style={{flex: 1}}
+      <View style={{ flex: 1 }}
         onLayout={(event) => {
             // console.log('ViewPager.onLayout()');
-            var viewWidth = event.nativeEvent.layout.width;
-            if (!viewWidth || this.state.viewWidth === viewWidth) {
-              return;
-            }
-            this.setState({
-              currentPage: this.state.currentPage,
-              viewWidth: viewWidth,
-            });
-          }}
+          var viewWidth = event.nativeEvent.layout.width;
+          if (!viewWidth || this.state.viewWidth === viewWidth) {
+            return;
+          }
+          this.setState({
+            currentPage: this.state.currentPage,
+            viewWidth: viewWidth
+          });
+        }}
+      >
+
+        <Animated.View style={[sceneContainerStyle, { transform: [{ translateX }] }]}
+          {...this._panResponder.panHandlers}
         >
-
-        <Animated.View style={[sceneContainerStyle, {transform: [{translateX}]}]}
-          {...this._panResponder.panHandlers}>
           {bodyComponents}
         </Animated.View>

-        {this.renderPageIndicator({goToPage: this.goToPage,
-                            pageCount: pageIDs.length,
-                            activePage: this.state.currentPage,
-                            scrollValue: this.state.scrollValue,
-                            scrollOffset: this.childIndex,
-                          })}
+        {this.renderPageIndicator({ goToPage: this.goToPage,
+          pageCount: pageIDs.length,
+          activePage: this.state.currentPage,
+          scrollValue: this.state.scrollValue,
+          scrollOffset: this.childIndex
+        })}
       </View>
     );
   }
@@ -339,8 +341,8 @@ var styles = StyleSheet.create({
     bottom: 10,
     left: 0,
     right: 0,
-    backgroundColor: 'transparent',
-  },
+    backgroundColor: 'transparent'
+  }
 });

 module.exports = ViewPager;
