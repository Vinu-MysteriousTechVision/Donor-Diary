apply plugin: "com.android.application"

import com.android.build.OutputFile
import java.util.regex.Pattern

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def readVersion() {
  def versionFile = new File(project.rootDir, 'version.properties')
  def version = new Properties()
  def stream
  try {
    stream = new FileInputStream(versionFile)
    version.load(stream)
  } catch (FileNotFoundException ignore) {

  } finally {
    if (stream != null) stream.close()
  }
  // safety defauls in case file is missing
  if(!version['build']) version['build'] = "1"

  if(!version['major']) version['major'] = "1"
  if(!version['minor']) version['minor'] = "0"
  if(!version['patch']) version['patch'] = "0"
  return version
}

def readVersionName() {
  def version = readVersion()
  println "Version is now..." + "${version['major']}.${version['minor']}.${version['patch']}"
  return "${version['major']}.${version['minor']}.${version['patch']}"
}

def readBuildCode() {
  def version = readVersion()
  def build = version['build'] as int
  return build
}

def incrementManifestVersionCode() {
  println ":incrementVersionCode - Incrementing Version Code..."
  def manifestFile = file("src/main/AndroidManifest.xml")
  def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
  def manifestText = manifestFile.getText()
  def matcherVersionCode = patternVersionCode.matcher(manifestText)
  matcherVersionCode.find()
  def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
  def mNextVersionCode = mVersionCode + 1
  def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
  println ":incrementVersionCode - current versionCode=" + mVersionCode
  println ":incrementVersionCode - next versionCode=" + mNextVersionCode
  manifestFile.write(manifestContent)
}

def incrementManifestVersionName (def type='patch') {
    println(":incrementVersionName - Incrementing Version Name...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
    if(type == 'major'){
      majorVersion++
      minorVersion = 0
      pointVersion = 0
    } else if (type == 'minor') {
      minorVersion++
      pointVersion = 0
    } else if (type == 'patch') {
      pointVersion++
    }
    def mNextVersionName = majorVersion + "." + minorVersion + "." + pointVersion
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    println(":incrementVersionName - current versionName=" + mVersionName);
    println(":incrementVersionName - new versionName=" + mNextVersionName);
    manifestFile.write(manifestContent)
}


def incrementBuildNumber() {
  def versionFile = new File(project.rootDir, 'version.properties')

  def version = readVersion()

  def build = version['build'] as int
  build++
  version['build'] = build.toString()

  def stream
  try {
    stream = new FileOutputStream(versionFile)
    version.store(stream, null)
  } catch (FileNotFoundException ignore) {
    println "FileNotFoundException..." + ignore
  } catch (IOException ex) {
    println "IOException..." + ex
  } finally {
    if (stream != null) stream.close()
  }
  println "Build number is now..." + build

  incrementManifestVersionCode()
  return build
}

def incrementVersionNumber(def type='patch') {
  def versionFile = new File(project.rootDir, 'version.properties')
  def version = readVersion()

  def major = version['major'] as int
  def minor = version['minor'] as int
  def patch = version['patch'] as int

  if(type == 'major'){
    major++
    minor = 0
    patch = 0
  } else if (type == 'minor') {
    minor++
    patch = 0
  } else if (type == 'patch') {
    patch++
  }
  version['major'] = major.toString()
  version['minor'] = minor.toString()
  version['patch'] = patch.toString()

  def stream
  try {
    stream = new FileOutputStream(versionFile)
    version.store(stream, null)
  } catch (FileNotFoundException ignore) {
    println "FileNotFoundException..." + ignore
  } finally {
    if (stream != null) stream.close()
  }
  println "Version is now..." + major + "." + minor + "." + patch
  incrementManifestVersionName(type)
  return major + "." + minor + "." + patch
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.donordiary"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode readBuildCode()
        versionName readVersionName()
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
      release {
        if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
          storeFile file(MYAPP_RELEASE_STORE_FILE)
          storePassword MYAPP_RELEASE_STORE_PASSWORD
          keyAlias MYAPP_RELEASE_KEY_ALIAS
          keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
      }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

//
task doMajorVersionIncrement << {
  println "Incrementing major version..."
  incrementVersionNumber('major')
}

//
task doMinorVersionIncrement << {
  println "Incrementing minor version..."
  incrementVersionNumber('minor')
}

//
task doPatchVersionIncrement << {
  println "Incrementing patch version..."
  incrementVersionNumber('patch')
}

//
task doBuildVersionIncrement << {
  println "Incrementing build version..."
  incrementBuildNumber()
}
